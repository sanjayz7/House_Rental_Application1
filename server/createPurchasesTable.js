const oracledb = require('oracledb');
const dbConfig = require('./config/dbConfig');

async function createPurchasesTable() {
  let connection;
  
  try {
    connection = await oracledb.getConnection(dbConfig);
    console.log('Connected to Oracle database');

    // Create purchases table
    const createPurchasesTable = `
      CREATE TABLE purchases (
        purchase_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
        listing_id NUMBER NOT NULL,
        buyer_id NUMBER NOT NULL,
        seller_id NUMBER NOT NULL,
        purchase_date TIMESTAMP DEFAULT SYSTIMESTAMP,
        status VARCHAR2(20) DEFAULT 'completed' CHECK (status IN ('pending', 'completed', 'cancelled')),
        notes CLOB,
        CONSTRAINT fk_purchases_listing FOREIGN KEY (listing_id) REFERENCES listings(listing_id),
        CONSTRAINT fk_purchases_buyer FOREIGN KEY (buyer_id) REFERENCES users(user_id),
        CONSTRAINT fk_purchases_seller FOREIGN KEY (seller_id) REFERENCES users(user_id)
      )
    `;

    await connection.execute(createPurchasesTable);
    console.log('âœ… Purchases table created successfully');

    // Create indexes
    const createIndexes = [
      'CREATE INDEX idx_purchases_buyer ON purchases(buyer_id)',
      'CREATE INDEX idx_purchases_seller ON purchases(seller_id)',
      'CREATE INDEX idx_purchases_listing ON purchases(listing_id)'
    ];

    for (const indexQuery of createIndexes) {
      await connection.execute(indexQuery);
    }
    console.log('âœ… Indexes created successfully');

    // Create stored procedure for adding a purchase
    const createPurchaseProcedure = `
      CREATE OR REPLACE PROCEDURE add_purchase(
        p_listing_id IN NUMBER,
        p_buyer_id IN NUMBER,
        p_seller_id IN NUMBER,
        p_notes IN CLOB DEFAULT NULL,
        p_purchase_id OUT NUMBER
      ) AS
      BEGIN
        INSERT INTO purchases (listing_id, buyer_id, seller_id, notes)
        VALUES (p_listing_id, p_buyer_id, p_seller_id, p_notes)
        RETURNING purchase_id INTO p_purchase_id;
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          RAISE;
      END;
    `;

    await connection.execute(createPurchaseProcedure);
    console.log('âœ… Add purchase procedure created successfully');

    // Create stored procedure for getting user purchases
    const createGetPurchasesProcedure = `
      CREATE OR REPLACE PROCEDURE get_user_purchases(
        p_user_id IN NUMBER,
        p_purchase_cursor OUT SYS_REFCURSOR
      ) AS
      BEGIN
        OPEN p_purchase_cursor FOR
        SELECT 
          p.purchase_id,
          p.purchase_date,
          p.status,
          p.notes,
          l.title,
          l.description,
          l.address,
          l.image_url,
          l.bedrooms,
          l.bathrooms,
          l.area_sqft,
          l.furnished,
          l.price,
          l.city,
          seller.name as seller_name,
          seller.email as seller_email,
          seller.phone as seller_phone
        FROM purchases p
        JOIN listings l ON p.listing_id = l.listing_id
        JOIN users seller ON p.seller_id = seller.user_id
        WHERE p.buyer_id = p_user_id
        ORDER BY p.purchase_date DESC;
      END;
    `;

    await connection.execute(createGetPurchasesProcedure);
    console.log('âœ… Get user purchases procedure created successfully');

    // Create stored procedure for getting seller sales
    const createGetSalesProcedure = `
      CREATE OR REPLACE PROCEDURE get_seller_sales(
        p_seller_id IN NUMBER,
        p_sales_cursor OUT SYS_REFCURSOR
      ) AS
      BEGIN
        OPEN p_sales_cursor FOR
        SELECT 
          p.purchase_id,
          p.purchase_date,
          p.status,
          p.notes,
          l.title,
          l.description,
          l.address,
          l.image_url,
          l.bedrooms,
          l.bathrooms,
          l.area_sqft,
          l.furnished,
          l.price,
          l.city,
          buyer.name as buyer_name,
          buyer.email as buyer_email
        FROM purchases p
        JOIN listings l ON p.listing_id = l.listing_id
        JOIN users buyer ON p.buyer_id = buyer.user_id
        WHERE p.seller_id = p_seller_id
        ORDER BY p.purchase_date DESC;
      END;
    `;

    await connection.execute(createGetSalesProcedure);
    console.log('âœ… Get seller sales procedure created successfully');

    console.log('ðŸŽ‰ All purchase-related database objects created successfully!');

  } catch (error) {
    console.error('Error creating purchases table:', error);
  } finally {
    if (connection) {
      try {
        await connection.close();
        console.log('Database connection closed');
      } catch (error) {
        console.error('Error closing connection:', error);
      }
    }
  }
}

// Run the function
createPurchasesTable();

