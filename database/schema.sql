-- USERS table for authentication and roles
CREATE TABLE users (
  user_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  name VARCHAR2(100) NOT NULL,
  email VARCHAR2(150) UNIQUE NOT NULL,
  password_hash VARCHAR2(200) NOT NULL,
  role VARCHAR2(20) CHECK (role IN ('user','owner','admin')) NOT NULL,
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- LISTINGS table for rental properties
CREATE TABLE listings (
  listing_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  owner_id NUMBER NOT NULL,
  title VARCHAR2(200) NOT NULL,
  description CLOB,
  image_url CLOB,
  address VARCHAR2(300),
  latitude NUMBER,
  longitude NUMBER,
  owner_phone VARCHAR2(40),
  bedrooms NUMBER,
  bathrooms NUMBER,
  area_sqft NUMBER,
  furnished VARCHAR2(30),
  verified NUMBER(1) DEFAULT 0,
  deposit NUMBER,
  available_from DATE,
  contact_start VARCHAR2(10),
  contact_end VARCHAR2(10),
  price NUMBER NOT NULL,
  total_units NUMBER DEFAULT 1,
  available_units NUMBER DEFAULT 1,
  city VARCHAR2(120),
  category VARCHAR2(60),
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
  updated_at TIMESTAMP,
  CONSTRAINT fk_listings_owner FOREIGN KEY (owner_id) REFERENCES users(user_id)
);

CREATE INDEX idx_listings_geo ON listings(latitude, longitude);
CREATE INDEX idx_listings_price ON listings(price);
CREATE INDEX idx_listings_city ON listings(city);

-- RATINGS table
CREATE TABLE ratings (
  rating_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  listing_id NUMBER NOT NULL,
  user_id NUMBER NOT NULL,
  score NUMBER CHECK (score BETWEEN 1 AND 5) NOT NULL,
  created_at TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT fk_ratings_listing FOREIGN KEY (listing_id) REFERENCES listings(listing_id),
  CONSTRAINT fk_ratings_user FOREIGN KEY (user_id) REFERENCES users(user_id),
  CONSTRAINT uq_rating_once UNIQUE (listing_id, user_id)
);

-- PURCHASES table for free house purchases
CREATE TABLE purchases (
  purchase_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  listing_id NUMBER NOT NULL,
  buyer_id NUMBER NOT NULL,
  seller_id NUMBER NOT NULL,
  purchase_date TIMESTAMP DEFAULT SYSTIMESTAMP,
  status VARCHAR2(20) DEFAULT 'completed' CHECK (status IN ('pending', 'completed', 'cancelled')),
  notes CLOB,
  CONSTRAINT fk_purchases_listing FOREIGN KEY (listing_id) REFERENCES listings(listing_id),
  CONSTRAINT fk_purchases_buyer FOREIGN KEY (buyer_id) REFERENCES users(user_id),
  CONSTRAINT fk_purchases_seller FOREIGN KEY (seller_id) REFERENCES users(user_id)
);

CREATE INDEX idx_purchases_buyer ON purchases(buyer_id);
CREATE INDEX idx_purchases_seller ON purchases(seller_id);
CREATE INDEX idx_purchases_listing ON purchases(listing_id);

-- Simple procedures for CRUD (skeletons; implement as needed)
CREATE OR REPLACE PROCEDURE add_listing(
  p_owner_id IN NUMBER,
  p_title IN VARCHAR2,
  p_description IN CLOB,
  p_image_url IN CLOB,
  p_address IN VARCHAR2,
  p_latitude IN NUMBER,
  p_longitude IN NUMBER,
  p_owner_phone IN VARCHAR2,
  p_bedrooms IN NUMBER,
  p_bathrooms IN NUMBER,
  p_area_sqft IN NUMBER,
  p_furnished IN VARCHAR2,
  p_verified IN NUMBER,
  p_deposit IN NUMBER,
  p_available_from IN DATE,
  p_contact_start IN VARCHAR2,
  p_contact_end IN VARCHAR2,
  p_price IN NUMBER,
  p_total_units IN NUMBER,
  p_available_units IN NUMBER,
  p_city IN VARCHAR2,
  p_category IN VARCHAR2,
  p_listing_id OUT NUMBER
) AS
BEGIN
  INSERT INTO listings (
    owner_id, title, description, image_url, address, latitude, longitude,
    owner_phone, bedrooms, bathrooms, area_sqft, furnished, verified, deposit,
    available_from, contact_start, contact_end, price, total_units, available_units,
    city, category, updated_at
  ) VALUES (
    p_owner_id, p_title, p_description, p_image_url, p_address, p_latitude, p_longitude,
    p_owner_phone, p_bedrooms, p_bathrooms, p_area_sqft, p_furnished, p_verified, p_deposit,
    p_available_from, p_contact_start, p_contact_end, p_price, p_total_units, p_available_units,
    p_city, p_category, SYSTIMESTAMP
  ) RETURNING listing_id INTO p_listing_id;
END;
/

CREATE OR REPLACE PROCEDURE update_listing_availability(
  p_listing_id IN NUMBER,
  p_available_units IN NUMBER
) AS
BEGIN
  UPDATE listings SET available_units = p_available_units, updated_at = SYSTIMESTAMP
  WHERE listing_id = p_listing_id;
END;
/
-- Create Sequence for Show IDs
CREATE SEQUENCE show_id_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Create Table for Shows
CREATE TABLE theater_shows (
    show_id NUMBER PRIMARY KEY,
    title VARCHAR2(100) NOT NULL,
    description VARCHAR2(1000),
    show_date DATE NOT NULL,
    start_time VARCHAR2(10) NOT NULL,
    end_time VARCHAR2(10),
    price NUMBER(10,2) NOT NULL,
    total_seats NUMBER(5) NOT NULL,
    available_seats NUMBER(5) NOT NULL,
    venue VARCHAR2(100) NOT NULL,
    category VARCHAR2(50),
    created_at DATE DEFAULT SYSDATE,
    updated_at DATE DEFAULT SYSDATE
);

-- Create Table for Bookings
CREATE TABLE bookings (
    booking_id NUMBER PRIMARY KEY,
    show_id NUMBER NOT NULL,
    customer_name VARCHAR2(100) NOT NULL,
    customer_email VARCHAR2(100) NOT NULL,
    num_tickets NUMBER(3) NOT NULL,
    total_amount NUMBER(10,2) NOT NULL,
    booking_date DATE DEFAULT SYSDATE,
    CONSTRAINT fk_show_id FOREIGN KEY (show_id) REFERENCES theater_shows(show_id) ON DELETE CASCADE
);

-- Create Sequence for Booking IDs
CREATE SEQUENCE booking_id_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Create Trigger to Auto-update the 'updated_at' field when a show is modified
CREATE OR REPLACE TRIGGER update_show_timestamp
BEFORE UPDATE ON theater_shows
FOR EACH ROW
BEGIN
    :NEW.updated_at := SYSDATE;
END;
/

-- Create Trigger to Automatically Set Show ID from Sequence
CREATE OR REPLACE TRIGGER show_id_trigger
BEFORE INSERT ON theater_shows
FOR EACH ROW
BEGIN
    SELECT show_id_seq.NEXTVAL INTO :NEW.show_id FROM dual;
END;
/

-- Create Trigger to Automatically Set Booking ID from Sequence
CREATE OR REPLACE TRIGGER booking_id_trigger
BEFORE INSERT ON bookings
FOR EACH ROW
BEGIN
    SELECT booking_id_seq.NEXTVAL INTO :NEW.booking_id FROM dual;
END;
/

-- Create Trigger to Update Available Seats after Booking
CREATE OR REPLACE TRIGGER update_available_seats
AFTER INSERT ON bookings
FOR EACH ROW
BEGIN
    UPDATE theater_shows
    SET available_seats = available_seats - :NEW.num_tickets
    WHERE show_id = :NEW.show_id;
END;
/

-- Create stored procedure to add a new show
CREATE OR REPLACE PROCEDURE add_show (
    p_title IN VARCHAR2,
    p_description IN VARCHAR2,
    p_show_date IN DATE,
    p_start_time IN VARCHAR2,
    p_end_time IN VARCHAR2,
    p_price IN NUMBER,
    p_total_seats IN NUMBER,
    p_venue IN VARCHAR2,
    p_category IN VARCHAR2,
    p_show_id OUT NUMBER
)
AS
BEGIN
    INSERT INTO theater_shows (
        title, description, show_date, start_time, end_time,
        price, total_seats, available_seats, venue, category
    ) VALUES (
        p_title, p_description, p_show_date, p_start_time, p_end_time,
        p_price, p_total_seats, p_total_seats, p_venue, p_category
    ) RETURNING show_id INTO p_show_id;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Create stored procedure to update a show
CREATE OR REPLACE PROCEDURE update_show (
    p_show_id IN NUMBER,
    p_title IN VARCHAR2,
    p_description IN VARCHAR2,
    p_show_date IN DATE,
    p_start_time IN VARCHAR2,
    p_end_time IN VARCHAR2,
    p_price IN NUMBER,
    p_total_seats IN NUMBER,
    p_available_seats IN NUMBER,
    p_venue IN VARCHAR2,
    p_category IN VARCHAR2
)
AS
BEGIN
    UPDATE theater_shows SET
        title = p_title,
        description = p_description,
        show_date = p_show_date,
        start_time = p_start_time,
        end_time = p_end_time,
        price = p_price,
        total_seats = p_total_seats,
        available_seats = p_available_seats,
        venue = p_venue,
        category = p_category
    WHERE show_id = p_show_id;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Create stored procedure to delete a show
CREATE OR REPLACE PROCEDURE delete_show (
    p_show_id IN NUMBER
)
AS
BEGIN
    DELETE FROM theater_shows WHERE show_id = p_show_id;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/